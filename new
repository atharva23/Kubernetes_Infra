provider "aws" {
  region = "us-east-1" # Change to your desired region
}
variable "scan_maintenance_windows_targets" {
    description = "The map of tags for targeting which EC2 instances will be scanned"
    type = list(object({
      key    = string
      values = list(string)
    }))
    default = [
      {
        key    = "Name"
        values = ["Terraform"]
      }
      
    ]
  }
  
variable "scan_maintenance_windows_targets" {
  description = "The map of tags for targetting which EC2 instances will be scaned"
  type = list(object({
    key : string
    values : list(string)
    }
    )
  )
  default = []
}


resource "aws_ssm_maintenance_window" "security_patch_window" {
  name          = "security-patch-window"
  schedule      = "cron(0 4 ? * SAT *)" # Early hours of Saturday for patching
  duration      = 3 # 3 hours for patching
  cutoff        = 1 # Allow 1 hour for patches to complete
  allow_unassociated_targets = true
  enabled       = true
}

resource "aws_ssm_maintenance_window_task" "apply_security_patches_task" {
  window_id        = aws_ssm_maintenance_window.security_patch_window.id
  task_type        = "RUN_COMMAND"
  task_arn         = "AWS-RunPatchBaseline"
  max_concurrency  = "2"
  service_role_arn = aws_iam_role.ssm_role.arn
  targets {
    key    = "WindowTargetIds"
    values = aws_ssm_maintenance_window_target.security_patch_target.*.id
  }
  task_invocation_parameters {
    run_command_parameters {
      parameter {
        name   = "Operation"
        values = ["Install"]
      }      
    }
  }
}



resource "aws_ssm_maintenance_window_target" "security_patch_target" {
  window_id      = aws_ssm_maintenance_window.security_patch_window.id
  name           = "security-patch-target"
  resource_type  = "INSTANCE"

  dynamic "targets" {
    for_each = toset(var.scan_maintenance_windows_targets)
    content {
      key    = targets.value.key
      values = targets.value.values
    }
  }
}


resource "aws_ssm_patch_baseline" "security_baseline" {
  name             = "security-baseline"
  operating_system = "AMAZON_LINUX"
  
  approval_rule {
    approve_after_days = 7
    compliance_level   = "HIGH"



    patch_filter {
      key    = "CLASSIFICATION"
      values = ["SecurityUpdates"]
    }

  }
}


resource "aws_iam_role" "ssm_role" {
  name = "ssm-role-for-patching"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect    = "Allow"
        Principal = {
          Service = "ssm.amazonaws.com"
        }
        Action    = "sts:AssumeRole"
      }
    ]
  })
}

# Attach a policy to the IAM role for Systems Manager
resource "aws_iam_role_policy_attachment" "ssm_role_policy_attachment" {
  role       = aws_iam_role.ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole"
}

